using Microsoft.VisualStudio.TestTools.UnitTesting;

using MultiPrecision;

using System;

namespace MultiPrecisionTest.Functions {
    public partial class MultiPrecisionTest {
        [TestMethod]
        public void EllipticKTest() {
            MultiPrecision<Pow2.N4>[] expecteds = {
                "1.570796326794896619231321691639751442099",
                "1.570892213762634838383765013658148158242",
                "1.571180032795041438223425908648837602791",
                "1.571660259085404462475980638860203814007",
                "1.572333687316706582329535212209326542114",
                "1.573201435732646974685903422867511431600",
                "1.574264951897157134380043432391406754072",
                "1.575526020203792632275518071378058170149",
                "1.576986771215813142124403053228808080382",
                "1.578649692938684470203836685095462402550",
                "1.580517644149563279924695229938270222728",
                "1.582593869933527089370421154532882246268",
                "1.584882019604428219905381867521768495373",
                "1.587386167219907807876991046016198398236",
                "1.590110834936041447005141969752702934076",
                "1.593061019488174391923864564511760439521",
                "1.596242222131783510148969071497949879506",
                "1.599660482431927364339457876511464875194",
                "1.603322416353528354654114324604467718208",
                "1.607235259179211220986766694284522093524",
                "1.611406913868947918120517114943101981137",
                "1.615846005579090044687955119080418434675",
                "1.620561943180913346261268249372780828777",
                "1.625564988764780423546022175378236137766",
                "1.630866336290717176779250478449835999908",
                "1.636478200756200875620806612571572288907",
                "1.642413919505597416132333876600570954550",
                "1.648688067613512458167616634361902107707",
                "1.655316589649785301251611828983868036814",
                "1.662316950594206593524987558756707212864",
                "1.669708309236550543554780680461706810321",
                "1.677511718101120709522640430662470267914",
                "1.685750354812596042871203657799076989501",
                "1.694449790921482836074175801660425053546",
                "1.703638305599322102392631783243181367617",
                "1.713347253384958428174478814287928374522",
                "1.723611497433979460045131701758728232499",
                "1.734469922658149008491198677833065695564",
                "1.745966046966776917952910920469504012244",
                "1.758148753853165948511219378387563509117",
                "1.771073176251581444370173363882960896208",
                "1.784801770558775273493564443460289000300",
                "1.799405631887585980971037299361565637897",
                "1.814966118346197970039845124630768375752",
                "1.831576875423119249888922130482477702014",
                "1.849346384446800813648217529367772024481",
                "1.868401206273682685533696103665400241193",
                "1.888890160227369561819371059356347822925",
                "1.910989780751829196553148218761342559253",
                "1.934911549848133954023052216084519177143",
                "1.960911645318837034415894895254048064066",
                "1.989304331048099811039918205561369371378",
                "2.020480750510110594265098432228743468311",
                "2.054935964434484610799673362109622076061",
                "2.093308982178513675802826670415071441560",
                "2.136444065813501942565951678890019488258",
                "2.185488469278223686913080323730158689730",
                "2.242056083769899906204833071691690000752",
                "2.308518623245655353212964858069578783169",
                "2.388565750790677332155058402408817164817",
                "2.488400491401035160956322413512420994765",
                "2.619693413111336250714012408473989800517",
                "2.808743835865441295201859657801262772197",
                "3.139811035182614296787416718055523464929"
            };

            for (int i = 0; i < 64; i++) {
                decimal k = i / 64m;

                MultiPrecision<Pow2.N4> expected = expecteds[i];

                MultiPrecision<Pow2.N4> y4 = MultiPrecision<Pow2.N4>.EllipticK(k);
                MultiPrecision<Pow2.N8> y8 = MultiPrecision<Pow2.N8>.EllipticK(k);
                MultiPrecision<Pow2.N16> y16 = MultiPrecision<Pow2.N16>.EllipticK(k);
                MultiPrecision<Pow2.N32> y32 = MultiPrecision<Pow2.N32>.EllipticK(k);

                Console.WriteLine(k);
                Console.WriteLine(y4);
                Console.WriteLine(y4.ToHexcode());
                Console.WriteLine(y8.ToHexcode());
                Console.WriteLine(y16.ToHexcode());
                Console.WriteLine(y32.ToHexcode());

                Assert.IsTrue(MultiPrecision<Pow2.N4>.NearlyEqualBits(expected, y4, 1));
                Assert.IsTrue(MultiPrecision<Pow2.N4>.NearlyEqualBits(y4, y8.Convert<Pow2.N4>(), 1));
                Assert.IsTrue(MultiPrecision<Pow2.N8>.NearlyEqualBits(y8, y16.Convert<Pow2.N8>(), 1));
                Assert.IsTrue(MultiPrecision<Pow2.N16>.NearlyEqualBits(y16, y32.Convert<Pow2.N16>(), 1));
            }
        }

        [TestMethod]
        public void EllipticETest() {
            MultiPrecision<Pow2.N4>[] expecteds = {
                "1.570796326794896619231321691639751442099",
                "1.570412761349269516545431818824656351298",
                "1.569261220653362449692566293935990537979",
                "1.567339161266547861533268689941312233560",
                "1.564642309262556894432573809162726348812",
                "1.561164606827105188583978426831218439541",
                "1.556898135200231341251735371719244798458",
                "1.551833011510613917853723267126743339708",
                "1.545957256105465034950412439920610612017",
                "1.539256625822205772842754943585490146008",
                "1.531714407188934920001865700211124271148",
                "1.523311161658283184882364334512055568333",
                "1.514024412502105109430704365649183056112",
                "1.503828259675239658897948073367740384066",
                "1.492692904431343553348439502338988628259",
                "1.480584059196426649062428523190171216515",
                "1.467462209339427155459795266990916136025",
                "1.453281680713016027667786029497154235178",
                "1.437989448067306392415813845061201573738",
                "1.421523591193239013511462538662535525527",
                "1.403811262030264903115686232825870910848",
                "1.384765956593437896803755085858764269574",
                "1.364283771446525378632800214807330979152",
                "1.342238129220117326418198691165940171289",
                "1.318472107994620997371842794497930930603",
                "1.292786847615912505695868022299876598500",
                "1.264923166685546275858129625971268685659",
                "1.234530575446421720353087028861755150253",
                "1.201110630736914697794518710797492052304",
                "1.163900959594213894953847972419093896657",
                "1.121593170232373842114401808256327787639",
                "1.071400529143524596844038702321775497692",
                "1.000000000000000000000000000000000000000"
            };

            for (int i = 0; i <= 32; i++) {
                decimal k = i / 32m;

                MultiPrecision<Pow2.N4> expected = expecteds[i];

                MultiPrecision<Pow2.N4> y4 = MultiPrecision<Pow2.N4>.EllipticE(k);
                MultiPrecision<Pow2.N8> y8 = MultiPrecision<Pow2.N8>.EllipticE(k);
                MultiPrecision<Pow2.N16> y16 = MultiPrecision<Pow2.N16>.EllipticE(k);
                MultiPrecision<Pow2.N32> y32 = MultiPrecision<Pow2.N32>.EllipticE(k);

                Console.WriteLine(k);
                Console.WriteLine(y4);
                Console.WriteLine(y4.ToHexcode());
                Console.WriteLine(y8.ToHexcode());
                Console.WriteLine(y16.ToHexcode());
                Console.WriteLine(y32.ToHexcode());

                Assert.IsTrue(MultiPrecision<Pow2.N4>.NearlyEqualBits(expected, y4, 1));
                Assert.IsTrue(MultiPrecision<Pow2.N4>.NearlyEqualBits(y4, y8.Convert<Pow2.N4>(), 1));
                Assert.IsTrue(MultiPrecision<Pow2.N8>.NearlyEqualBits(y8, y16.Convert<Pow2.N8>(), 1));
                Assert.IsTrue(MultiPrecision<Pow2.N16>.NearlyEqualBits(y16, y32.Convert<Pow2.N16>(), 1));
            }
        }

        [TestMethod]
        public void EllipticPiNp0p75Test() {
            MultiPrecision<Pow2.N4>[] expecteds = {
                "3.141592653589793238462643383279502884197",
                "3.141848356072601861213062516261944266874",
                "3.142615932075808817696920204266802203076",
                "3.143896789794546649548370982324051471981",
                "3.145693284684274992760948205473161635156",
                "3.148008732253273552313983992963676964589",
                "3.150847426168243295320643348286076171218",
                "3.154214661873475605745652798669579669746",
                "3.158116765987672634484588810957320398650",
                "3.162561131811132856817570189897342571590",
                "3.167556261351051320227005871215321042021",
                "3.173111814355710117814272642853935624309",
                "3.179238664941177265207350751074217316424",
                "3.185948966498919469657627200816529808497",
                "3.193256225691971671560114149411759977662",
                "3.201175386483968850438327010926558823680",
                "3.209722925302992672622162011428473211997",
                "3.218916958625103141411090445522323741070",
                "3.228777364475805371422957753504919545880",
                "3.239325919597867842754694367218977404529",
                "3.250586454328604172180086775979916470896",
                "3.262585027578484938207170468721301478182",
                "3.275350124717546261162578672012539058032",
                "3.288912881671160748240225094566934750918",
                "3.303307339120644266995220431403044732381",
                "3.318570731419889772516013021385226899759",
                "3.334743815705798075686634261955079790234",
                "3.351871247734615002937676687737806467552",
                "3.370002012265530818258472229907111034344",
                "3.389189917397659127361273674451776376806",
                "3.409494164225206166464194820270330578363",
                "3.430980005610415784712117039581624321981",
                "3.453719510918742140223065947190538656273",
                "3.477792457392800093144511049028528056619",
                "3.503287373696983186305041776481371201832",
                "3.530302767360321838857703240728666844708",
                "3.558948575811045742497216914727103893356",
                "3.589347891020690322600895016485449546708",
                "3.621639021271669619276097579995437929153",
                "3.655977971366376993693922486859825025508",
                "3.692541446314330953343932249974253264227",
                "3.731530515465358479595824647227637955570",
                "3.773175117534922491663512519291369494773",
                "3.817739646896646591957379687269522292080",
                "3.865529945224184482492244695504077811635",
                "3.916902141183068017016649817271348970089",
                "3.972273951631643294226490895290830795513",
                "4.032139307889005382439243769009380748868",
                "4.097087543965707836739217492660174163824",
                "4.167828952819947162337004267410303120102",
                "4.245229405011163034297725825956080934519",
                "4.330358147458939688325593884230901305860",
                "4.424555249349115046381709948552214899473",
                "4.529529173349754049872409617296358204728",
                "4.647502070179314764655062330765725291647",
                "4.781433617349950688835707996214028108230",
                "4.935380125293062643123447893401974747617",
                "5.115099727018348518301765802893270031634",
                "5.329136638546780871349465898822427245882",
                "5.590921997092963670447516211965202866844",
                "5.923292095804933293825382297409579888872",
                "6.369747160733816472301728300366946215135",
                "7.029686940714815962463709597822037430236",
                "8.226867677452678248812077172999511628089"
            };

            const double n = 0.75;

            for (int i = 0; i < 64; i++) {
                decimal k = i / 64m;

                MultiPrecision<Pow2.N4> expected = expecteds[i];

                MultiPrecision<Pow2.N4> y4 = MultiPrecision<Pow2.N4>.EllipticPi(n, k);
                MultiPrecision<Pow2.N8> y8 = MultiPrecision<Pow2.N8>.EllipticPi(n, k);
                MultiPrecision<Pow2.N16> y16 = MultiPrecision<Pow2.N16>.EllipticPi(n, k);
                MultiPrecision<Pow2.N32> y32 = MultiPrecision<Pow2.N32>.EllipticPi(n, k);

                Console.WriteLine(k);
                Console.WriteLine(y4);
                Console.WriteLine(y4.ToHexcode());
                Console.WriteLine(y8.ToHexcode());
                Console.WriteLine(y16.ToHexcode());
                Console.WriteLine(y32.ToHexcode());

                Assert.IsTrue(MultiPrecision<Pow2.N4>.NearlyEqualBits(expected, y4, 1));
                Assert.IsTrue(MultiPrecision<Pow2.N4>.NearlyEqualBits(y4, y8.Convert<Pow2.N4>(), 1));
                Assert.IsTrue(MultiPrecision<Pow2.N8>.NearlyEqualBits(y8, y16.Convert<Pow2.N8>(), 1));
                Assert.IsTrue(MultiPrecision<Pow2.N16>.NearlyEqualBits(y16, y32.Convert<Pow2.N16>(), 1));
            }
        }

        [TestMethod]
        public void EllipticPiNp0p50Test() {
            MultiPrecision<Pow2.N4>[] expecteds = {
                "2.221441469079183123507940495030346849307",
                "2.221600341057076015581426576251492744467",
                "2.222077233978647090471864314006309150954",
                "2.222872980261042171462813942161491867055",
                "2.223988972126615512424116372330359270438",
                "2.225427168948300352011933412987732065915",
                "2.227190107643557385982074536527693475471",
                "2.229280916229744834932299924254720565932",
                "2.231703330689518500580313543719463678675",
                "2.234461715333412328476150248659205611618",
                "2.237561086888842929762491067185236729011",
                "2.241007142591301995071221242401795126043",
                "2.244806292605456860315303201649801025714",
                "2.248965697162445350547671431949499292138",
                "2.253493308866206576307960494815096804597",
                "2.258397920697871518917118905032849153041",
                "2.263689220335001996037386258202690828189",
                "2.269377851504166533280617639089693578075",
                "2.275475483203823235416338594679148147761",
                "2.281994887773205969748946402351537169164",
                "2.288950028946116305320386939410393334783",
                "2.296356161221415832214426475214836432858",
                "2.304229942111023587519727802418763400804",
                "2.312589559099337790736800384932907918635",
                "2.321454873475187738880209151988226767180",
                "2.330847583591186813095565565926462495549",
                "2.340791410581477709165173075974757766696",
                "2.351312310147350637767699592884503640183",
                "2.362438714726614168536342415753357697223",
                "2.374201811229697505877864341215735455349",
                "2.386635860595634045468382051704315540536",
                "2.399778566749441501434416648648643133045",
                "2.413671504201194640666923520539289936849",
                "2.428360615611617037913013928082851093428",
                "2.443896793286142780837189997634669037101",
                "2.460336561919306914487734928680674016080",
                "2.477742884224398144310169950205867420110",
                "2.496186116664376282451285402624053984493",
                "2.515745149783692398382804661555036268616",
                "2.536508777233188992499821030725797336713",
                "2.558577350337466814855231084631689244273",
                "2.582064792198756862556593675586827237986",
                "2.607101068633903393209429027556352368684",
                "2.633835245301925397494317674110010698048",
                "2.662439305077557633540273734598163191673",
                "2.693112962944694390238895636176117561465",
                "2.726089806511720910713221772966400345919",
                "2.761645223012485511141449102327746306226",
                "2.800106771428104638172933908972820171837",
                "2.841867959232988741128195776418275479454",
                "2.887406851811198102945783372054923684837",
                "2.937311691641649678194668325682372488860",
                "2.992316937848920651604240100196196661243",
                "3.053355237663515277917784096831893740307",
                "3.121634561321517444810125876387242504706",
                "3.198756622751008187409738798227969818033",
                "3.286906170793683540936071283381826634031",
                "3.389168771192506391584601477281636496871",
                "3.510097833477265678098342224339087935197",
                "3.656808516918773734391358740225095305492",
                "3.841319444605713503426684429889841371783",
                "4.086358401432419354624044401041017223356",
                "4.443429350757277764371975016037277810877",
                "5.078608879942593183706131328544063164289"
            };

            const double n = 0.50;

            for (int i = 0; i < 64; i++) {
                decimal k = i / 64m;

                MultiPrecision<Pow2.N4> expected = expecteds[i];

                MultiPrecision<Pow2.N4> y4 = MultiPrecision<Pow2.N4>.EllipticPi(n, k);
                MultiPrecision<Pow2.N8> y8 = MultiPrecision<Pow2.N8>.EllipticPi(n, k);
                MultiPrecision<Pow2.N16> y16 = MultiPrecision<Pow2.N16>.EllipticPi(n, k);
                MultiPrecision<Pow2.N32> y32 = MultiPrecision<Pow2.N32>.EllipticPi(n, k);

                Console.WriteLine(k);
                Console.WriteLine(y4);
                Console.WriteLine(y4.ToHexcode());
                Console.WriteLine(y8.ToHexcode());
                Console.WriteLine(y16.ToHexcode());
                Console.WriteLine(y32.ToHexcode());

                Assert.IsTrue(MultiPrecision<Pow2.N4>.NearlyEqualBits(expected, y4, 1));
                Assert.IsTrue(MultiPrecision<Pow2.N4>.NearlyEqualBits(y4, y8.Convert<Pow2.N4>(), 1));
                Assert.IsTrue(MultiPrecision<Pow2.N8>.NearlyEqualBits(y8, y16.Convert<Pow2.N8>(), 1));
                Assert.IsTrue(MultiPrecision<Pow2.N16>.NearlyEqualBits(y16, y32.Convert<Pow2.N16>(), 1));
            }
        }

        [TestMethod]
        public void EllipticPiNm8Test() {
            MultiPrecision<Pow2.N4>[] expecteds = {
                "0.5235987755982988730771072305465838140329",
                "0.5236147563937753299709452182734969919369",
                "0.5236627207412888084375505987483939659385",
                "0.5237427346281527460673144804205022820493",
                "0.5238549083811458102370184891150977783603",
                "0.5239993971920986659889328253343400561237",
                "0.5241764018611869447256669313534775238168",
                "0.5243861697655595425663523589585307897377",
                "0.5246289960633411079458538859978689850043",
                "0.5249052251456383700640925654777943209774",
                "0.5252152523520019898552731552545972649332",
                "0.5255595259679056256877208301103137714140",
                "0.5259385495262669885918571317808143262095",
                "0.5263528844389273895171655183843828319387",
                "0.5268031529884152906998761299040388438591",
                "0.5272900417153505244510169865685080106621",
                "0.5278143052426241171053420614052221064246",
                "0.5283767705841640037900976393784476240344",
                "0.5289783419938503254829876884526390410411",
                "0.5296200064191951182552513830903375980624",
                "0.5303028396350180299449632610225196927748",
                "0.5310280131448608781421803082284799346583",
                "0.5317968019526944597267220110908005618226",
                "0.5326105933250828212219652501664471796331",
                "0.5334708966850080016175517574923344575582",
                "0.5343793548038041413347528991856208281342",
                "0.5353377564880880765534086131800981159737",
                "0.5363480509954498130554190247608523082487",
                "0.5374123644575664465153306412723043561782",
                "0.5385330186443584198356305819506403561555",
                "0.5397125524704359641486286750093100527235",
                "0.5409537467287844310165412686736986591819",
                "0.5422596526408516351282497452930308635925",
                "0.5436336249427772017153252211725927829574",
                "0.5450793603922063642945209370792768213718",
                "0.5466009427893489828760698626420711337479",
                "0.5482028958737092130729471141346277489967",
                "0.5498902458033476463669481771780117530896",
                "0.5516685953729794291422655631352584880953",
                "0.5535442127173080110722511260258789042115",
                "0.5555241380283387048212451678962920086947",
                "0.5576163128635409018423326673160082374409",
                "0.5598297380418254478917017777683373462434",
                "0.5621746680719389166508452907858419303348",
                "0.5646628527644836251417438769121030189559",
                "0.5673078404944727867969399969880988689174",
                "0.5701253630455537392190185828149355543656",
                "0.5731338299276283614068276180199561929978",
                "0.5763549718787245814486168161398572652218",
                "0.5798146911817034828028919029954476704035",
                "0.5835442042376844889750981414361719391115",
                "0.5875816061462152369435403057388623699600",
                "0.5919740597515894914093858920736891716258",
                "0.5967809350181921367822133512501148302333",
                "0.6020784423146065755553873382571184374304",
                "0.6079667050102006136779489055766774170406",
                "0.6145809989108115017135441070047621758552",
                "0.6221105086807432563960786339305125020524",
                "0.6308315913160392883418669049612036955632",
                "0.6411715456333681467707619979747998674535",
                "0.6538442387972521354569717145497817321839",
                "0.6701840872748293567980948950080649557384",
                "0.6931779253559472836926528710401542573529",
                "0.7323256978683897733741437622522436421579"
            };

            const double n = -8;

            for (int i = 0; i < 64; i++) {
                decimal k = i / 64m;

                MultiPrecision<Pow2.N4> expected = expecteds[i];

                MultiPrecision<Pow2.N4> y4 = MultiPrecision<Pow2.N4>.EllipticPi(n, k);
                MultiPrecision<Pow2.N8> y8 = MultiPrecision<Pow2.N8>.EllipticPi(n, k);
                MultiPrecision<Pow2.N16> y16 = MultiPrecision<Pow2.N16>.EllipticPi(n, k);
                MultiPrecision<Pow2.N32> y32 = MultiPrecision<Pow2.N32>.EllipticPi(n, k);

                Console.WriteLine(k);
                Console.WriteLine(y4);
                Console.WriteLine(y4.ToHexcode());
                Console.WriteLine(y8.ToHexcode());
                Console.WriteLine(y16.ToHexcode());
                Console.WriteLine(y32.ToHexcode());

                Assert.IsTrue(MultiPrecision<Pow2.N4>.NearlyEqualBits(expected, y4, 1));
                Assert.IsTrue(MultiPrecision<Pow2.N4>.NearlyEqualBits(y4, y8.Convert<Pow2.N4>(), 1));
                Assert.IsTrue(MultiPrecision<Pow2.N8>.NearlyEqualBits(y8, y16.Convert<Pow2.N8>(), 1));
                Assert.IsTrue(MultiPrecision<Pow2.N16>.NearlyEqualBits(y16, y32.Convert<Pow2.N16>(), 1));
            }
        }

        [TestMethod]
        public void EllipticPiNm16Test() {
            MultiPrecision<Pow2.N4>[] expecteds = {
                "0.3809740689239761997006901461043671775548",
                "0.3809831475408617782026675008322830056213",
                "0.3810103953204535835971028231981213408891",
                "0.3810558481054202888238627543883545128491",
                "0.3811195658203169851046382480671877124942",
                "0.3812016327537244393701356543571490577458",
                "0.3813021579572362544625790514703772113268",
                "0.3814212757653701604539032809160529760402",
                "0.3815591464417668907178524619400741281698",
                "0.3817159569584238283642939380844461053150",
                "0.3818919219162175844330428514947010156449",
                "0.3820872846166301204063662028222672281009",
                "0.3823023182964416289993165368463193437176",
                "0.3825373275392303914362835149670948620462",
                "0.3827926498798724404600072224721042137075",
                "0.3830686576209179118128299781030138955489",
                "0.3833657598828030037610245643135419807150",
                "0.3836844049134163079797978230224857550367",
                "0.3840250826866722571486436085099095028908",
                "0.3843883278245694540101889746102688213889",
                "0.3847747228828703105631644478723396753592",
                "0.3851849020472055945808051879181818891158",
                "0.3856195552942986466859955525981619422733",
                "0.3860794330823861105684294512437587666605",
                "0.3865653516461173240088668093077092705911",
                "0.3870781989846589627669662424711981422587",
                "0.3876189416479384905044187287044129552639",
                "0.3881886324455917671189881094508351580244",
                "0.3887884192270798780655604771505008487227",
                "0.3894195549106876054933293523382886177977",
                "0.3900834089751026961270114186657011963409",
                "0.3907814806718071755843086588325792704419",
                "0.3915154142719496271618903097782840238564",
                "0.3922870167308182582438524583721611137132",
                "0.3930982782406229846311030879288297094015",
                "0.3939513962535400569342643292798742256712",
                "0.3948488036993271761717708187986225222609",
                "0.3957932023054378879236166075172370805036",
                "0.3967876021664352560513067911468750907909",
                "0.3978353690230861395674827464562589989538",
                "0.3989402811272008964759613881262167395288",
                "0.4001065981251040297747649017445153264203",
                "0.4013391451469466133482611352288742050440",
                "0.4026434163234665567703722357580753247872",
                "0.4040257033890876565590688239124643691589",
                "0.4054932570562091615551783576019941426641",
                "0.4070544917463834689389180971368662755729",
                "0.4087192484896133723469021665770392971572",
                "0.4104991370758000335398829027811157886897",
                "0.4124079880516613525342441476955306058226",
                "0.4144624599127772158722763464940252965431",
                "0.4166828703465902868642622791590483222539",
                "0.4190943589504564802820830936007857795366",
                "0.4217285542986909723168029615899337457127",
                "0.4246260336881928978058172233409842332401",
                "0.4278400769517461824569081902904688462596",
                "0.4314426303785956501380136714427118970961",
                "0.4355342569162846705038143634875724610275",
                "0.4402617780529355304947167895359759440636",
                "0.4458520870251735275190338303161486471743",
                "0.4526840464387958352414105494492196209967",
                "0.4614654941178051121627408186315149483680",
                "0.4737799873688316635447690952751743305867",
                "0.4946616092545485500906578694866806067099"
            };

            const double n = -16;

            for (int i = 0; i < 64; i++) {
                decimal k = i / 64m;

                MultiPrecision<Pow2.N4> expected = expecteds[i];

                MultiPrecision<Pow2.N4> y4 = MultiPrecision<Pow2.N4>.EllipticPi(n, k);
                MultiPrecision<Pow2.N8> y8 = MultiPrecision<Pow2.N8>.EllipticPi(n, k);
                MultiPrecision<Pow2.N16> y16 = MultiPrecision<Pow2.N16>.EllipticPi(n, k);
                MultiPrecision<Pow2.N32> y32 = MultiPrecision<Pow2.N32>.EllipticPi(n, k);

                Console.WriteLine(k);
                Console.WriteLine(y4);
                Console.WriteLine(y4.ToHexcode());
                Console.WriteLine(y8.ToHexcode());
                Console.WriteLine(y16.ToHexcode());
                Console.WriteLine(y32.ToHexcode());

                Assert.IsTrue(MultiPrecision<Pow2.N4>.NearlyEqualBits(expected, y4, 1));
                Assert.IsTrue(MultiPrecision<Pow2.N4>.NearlyEqualBits(y4, y8.Convert<Pow2.N4>(), 1));
                Assert.IsTrue(MultiPrecision<Pow2.N8>.NearlyEqualBits(y8, y16.Convert<Pow2.N8>(), 1));
                Assert.IsTrue(MultiPrecision<Pow2.N16>.NearlyEqualBits(y16, y32.Convert<Pow2.N16>(), 1));
            }
        }

        [TestMethod]
        public void EllipticPikp50Test() {
            MultiPrecision<Pow2.N4>[] expecteds = {
                "0.3915154142719496271618903097782840238564",
                "0.3922530789837960241156090772965459509676",
                "0.3929948866873978006653866527420575239618",
                "0.3937408761641351534821340990452215117367",
                "0.3944910867045136289766945109776736488938",
                "0.3952455581167792310670038648271368936062",
                "0.3960043307357122231054842454566866892195",
                "0.3967674454316040181616711872270146027046",
                "0.3975349436194216769485585315033318417358",
                "0.3983068672681646618244465472616216046569",
                "0.3990832589104186286422527091821813058413",
                "0.3998641616521111759082627837047358187065",
                "0.4006496191824746129113209336115928080013",
                "0.4014396757842209553570993822784209727766",
                "0.4022343763439345087627167240498705442785",
                "0.4030337663626875566140053850515539895176",
                "0.4038378919668848322479464050845573239842",
                "0.4046467999193426207906767760274937602213",
                "0.4054605376306085104595628935387799234708",
                "0.4062791531705279913370700100556800834532",
                "0.4071026952800642845642879309697769330882",
                "0.4079312133833779760119463651837274568091",
                "0.4087647576001732261051446098849523614041",
                "0.4096033787583175318534763896360293474345",
                "0.4104471284067422285299373855135886938887",
                "0.4112960588286311371201760321791567046544",
                "0.4121502230549049899100494169564090157038",
                "0.4130096748780095006879260478369614295522",
                "0.4138744688660151883152451517579148357589",
                "0.4147446603770373131842657291522926452530",
                "0.4156203055739845456693745522012757200251",
                "0.4165014614396452544359797206659266433430",
                "0.4173881857921205807623545862293896642065",
                "0.4182805373006137532342597880751274663789",
                "0.4191785755015853956859604514062773951920",
                "0.4200823608152848904981444256133409802908",
                "0.4209919545626681797554373664855904770288",
                "0.4219074189827127187652340956435050203520",
                "0.4228288172501406405172374196252759391826",
                "0.4237562134935615463125135524093561446961",
                "0.4246896728140467075274750873518629567294",
                "0.4256292613041468468408783101633064429060",
                "0.4265750460673660648041878759774507759169",
                "0.4275270952381048899668986379249613651298",
                "0.4284854780020858584951612252963769263763",
                "0.4294502646172754729894312034969596732838",
                "0.4304215264353168506899482791210415527022",
                "0.4313993359234878491642841556052082732683",
                "0.4323837666871999536387627803560629773741",
                "0.4333748934930537251399088047255616384802",
                "0.4343727922924671433645470278060822066571",
                "0.4353775402458937335476691061644901106334",
                "0.4363892157476479434362177139280026168901",
                "0.4374078984513558357377622351379085494211",
                "0.4384336692960497840738953884017197494166",
                "0.4394666105329265075546862442159525623421",
                "0.4405068057527884516782033485917352314648",
                "0.4415543399141892224760667618367017027658",
                "0.4426092993723045078556947782219948025112",
                "0.4436717719085506761742684740480739030382",
                "0.4447418467609740285218968933793182424190",
                "0.4458196146554344993604003944784279963755",
                "0.4469051678376084514963907189470497145534",
                "0.4479986001058360973720139479418961261472",
                "0.4491000068448400009191830435407163245494",
                "0.4502094850603420744091912917906484130568",
                "0.4513271334146074845900785836481076681209",
                "0.4524530522629449237795820210054435795572",
                "0.4535873436911937864073174406873504114857",
                "0.4547301115542299218115739883984840144965",
                "0.4558814615155228120352202753712613519797",
                "0.4570415010877782511851362713817270417221",
                "0.4582103396747018829921176598622270699599",
                "0.4593880886139202880304122338042427337415",
                "0.4605748612210977042575285901401359819967",
                "0.4617707728352879168855582913077475416122",
                "0.4629759408655623690133255784935896622708",
                "0.4641904848389571260098373462117893750260",
                "0.4654145264497829775859534382047069711796",
                "0.4666481896103446852416574376454844665947",
                "0.4678916005031171829366046025673863653931",
                "0.4691448876344284192059507113909972465946",
                "0.4704081818897004935464011564399867105205",
                "0.4716816165903027929667326877186651609516",
                "0.4729653275520729806073505199056253036493",
                "0.4742594531455639320107944284436129157310",
                "0.4755641343580770609625184799982442590485",
                "0.4768795148575449310953395380451105530292",
                "0.4782057410583286172395909136761230001180",
                "0.4795429621889979677023962167621932346022",
                "0.4808913303621657315122617987911795708443",
                "0.4822510006464494597701853583632527521217",
                "0.4836221311406381745917954309035469892437",
                "0.4850048830501440301028284193795152309023",
                "0.4863994207658225753952312425296660672060",
                "0.4878059119452487775609964972705755346939",
                "0.4892245275965396826884654570887575562952",
                "0.4906554421648184933521310773862997263430",
                "0.4920988336214189325355859342106261546384",
                "0.4935548835559330565820491902254055909540",
                "0.4950237772712101847920904417916251505473",
                "0.4965057038814193424914022183654655508917",
                "0.4980008564132925803100977783038595260533",
                "0.4995094319106717483657217733868898272958",
                "0.5010316315424867841743729449898409413209",
                "0.5025676607142993324675445114685188740632",
                "0.5041177291835515696577431227387476408126",
                "0.5056820511786664724830177427910074213906",
                "0.5072608455221524674681059222791652548968",
                "0.5088543357578724445332886370910247813968",
                "0.5104627502826445348757708363902406324974",
                "0.5120863224823498619954919620536291614479",
                "0.5137252908727306987254468787489822999033",
                "0.5153798992450711271820897092325696746666",
                "0.5170503968169614291509280932605663512294",
                "0.5187370383883570598141395552667954481120",
                "0.5204400845031532080611280954972031569190",
                "0.5221598016165066540927285452666540638797",
                "0.5238964622681479340243636529968663105677",
                "0.5256503452619387484627968566413221933694",
                "0.5274217358519421468645993212570574173922",
                "0.5292109259352863239043485618028763592969",
                "0.5310182142521169230516131291773742817982",
                "0.5328439065929476042122174034666445409448",
                "0.5346883160137343481812345181187101775164",
                "0.5365517630590155960158246396149255622217",
                "0.5384345759934779154718279622226536422058",
                "0.5403370910423255128536762452713064366163",
                "0.5422596526408516351282497452930308635925",
                "0.5442026136936308070785377555490439782628",
                "0.5461663358437730001595169983180476958982",
                "0.5481511897527043179531920919598763510398",
                "0.5501575553909636984188600365260715751022",
                "0.5521858223405315730686140836903740512960",
                "0.5542363901092344927618655132989570500828",
                "0.5563096684577995420491202087322766542018",
                "0.5584060777401640406756451337957155286148",
                "0.5605260492576797032230354548646467235580",
                "0.5626700256278862374486393858424461286096",
                "0.5648384611685674613805892912384764152531",
                "0.5670318222978435734880741382877964462610",
                "0.5692505879510963973338284056409545121743",
                "0.5714952500155704344716800825476160612578",
                "0.5737663137835416050829853003134561060651",
                "0.5760642984249978601289098756822259774145",
                "0.5783897374808316554236121460075193347409",
                "0.5807431793776038511136156452859386465377",
                "0.5831251879650022258709398920847823272567",
                "0.5855363430771857842011288197116712644923",
                "0.5879772411192787246662801355948712901547",
                "0.5904484956803556925640071823745458875761",
                "0.5929507381743431604801854707248417410829",
                "0.5954846185103508967405757746934833966595",
                "0.5980508057940429658798217073539535771992",
                "0.6006499890617600694608710934418017785039",
                "0.6032828780492148385421130081384151104989",
                "0.6059502039966995399830844282587442544245",
                "0.6086527204928722223857621976545591261497",
                "0.6113912043593233297803484973024205101382",
                "0.6141664565782710456109781027973036385769",
                "0.6169793032658909639428500577563295181179",
                "0.6198305966939550689378573024075966219668",
                "0.6227212163626374779990043948376034114073",
                "0.6256520701275411092166900470090230365234",
                "0.6286240953842116213586122952043693440312",
                "0.6316382603136340188753222652695991012125",
                "0.6346955651924547255479966887604037485907",
                "0.6377970437719393697339501499583632826936",
                "0.6409437647299658205448437061390289387363",
                "0.6441368332006651829251634082873868920796",
                "0.6473773923866627230038321116301362128417",
                "0.6506666252592385066914268670089734803313",
                "0.6540057563521266051436845707984695229843",
                "0.6573960536551050485724430895530171856977",
                "0.6608388306139996141142924844836778571402",
                "0.6643354482442366922333331339387183102674",
                "0.6678873173656379695816967587612221276997",
                "0.6714959009667570251001926320903578799383",
                "0.6751627167077201967947418048765770612548",
                "0.6788893395712568435670432304941957222479",
                "0.6826774046723936432511432964723360030224",
                "0.6865286102381507978636187960731106473982",
                "0.6904447207695227348314920699649348062989",
                "0.6944275703990607897383810443736058510391",
                "0.6984790664585101589406385688295160972745",
                "0.7026011932721990189128391611327675745651",
                "0.7067960161932463522924506727611317387281",
                "0.7110656859011604360510368999275604861254",
                "0.7154124429810575878816512837155003024815",
                "0.7198386228065580380225880327290872353748",
                "0.7243466607504323264106205342530697430389",
                "0.7289390977492995916839980663405026454481",
                "0.7336185862511435976287076918950380370295",
                "0.7383878965771417411063477618469601888472",
                "0.7432499237323288285933806352333771816033",
                "0.7482076947029777091243244129585945043161",
                "0.7532643762823145729977234816733599075929",
                "0.7584232834703453548151748805888838295332",
                "0.7636878884982054297481398298184377807417",
                "0.7690618305326196612369603540395053478183",
                "0.7745489261218448698164952872916640458220",
                "0.7801531804509434538723740602422545588853",
                "0.7858787994814989144148655447566066223672",
                "0.7917302030590393606404286809885628874656",
                "0.7977120390806082788109957828501718461318",
                "0.8038291988252569947545742251530367766832",
                "0.8100868335618972813221847866385625163033",
                "0.8164903725621392947609597231301656276974",
                "0.8230455426606750368155190086937336219663",
                "0.8297583895227139090738561089482682001019",
                "0.8366353007972421766709313178634827125980",
                "0.8436830313568226189421859128470562128095",
                "0.8509087308496975426929490244211405695038",
                "0.8583199738186060219575409943983424831027",
                "0.8659247926735630370521643224391464106405",
                "0.8737317138435705246091925539764648357124",
                "0.8817497974756648352742447331768006118804",
                "0.8899886810998356912501047143776697426080",
                "0.8984586277363531578722076098616725016017",
                "0.9071705789893181143517329338337307296609",
                "0.9161362137484980951309936373690437083768",
                "0.9253680132127608118256183252834867993979",
                "0.9348793330551350386591021669280993496770",
                "0.9446844836747016518523660710346404879412",
                "0.9547988196277867025908150613533504780052",
                "0.9652388395047439488137207644314536319443",
                "0.9760222977244387274373326385902678258319",
                "0.9871683299631104069988387612308474904991",
                "0.9986975942259288594088939418818838891968",
                "1.010632429918629344578207082061162222089",
                "1.022997037696046049346726389154937241841",
                "1.035817683370401429853521271939306868526",
                "1.049122929775322326003063532247798476851",
                "1.062943901227706665857713126555184364028",
                "1.077314586141856695261317284753423563653",
                "1.092272184471171330704982888512719352876",
                "1.107857508036910714717980258039321594380",
                "1.124115443522206843984664065883168762704",
                "1.141095490055522525944722812687485103865",
                "1.158852386003476684281552815606734896343",
                "1.177446843000566182743819258901179034741",
                "1.196946409579622480414831880682278566484",
                "1.217426492324020878924098576107338499026",
                "1.238971569637942489412922939136224154100",
                "1.261676642569495414864775749913829571629",
                "1.285648979378753730142843246184095343012",
                "1.311010226777017474260194123601339333559",
                "1.337898982473908054363776526715960047194",
                "1.366473953004596894512709059446122308783",
                "1.396917860892234411922373592746196693694",
                "1.429442320628110302976784462678652643232",
                "1.464293980597927164163614505268534671750",
                "1.501762338391639983570739465929933067237",
                "1.542189796060225394678958435599181132286",
                "1.585984755292718737309746169559730785807",
                "1.633638901184413198769017477852979274384",
                "1.685750354812596042871203657799076989501",
                "1.743055203423087519438817870406204126833",
                "1.806471241220572952744959588614984951798",
                "1.877159929916670829540772381954644334970",
                "1.956616279119236207279727022654554848034",
                "2.046802835933330147782383267738238665943",
                "2.150355864494560960711185007889684350771",
                "2.270914662293386848584767309594772384232",
                "2.413671504201194640666923520539289936849",
                "2.586341145876169561574771977861697765279",
                "2.800989240126823247231928424471212122803",
                "3.077792413160061697700402422813778987074",
                "3.453719510918742140223065947190538656273",
                "4.006151866567190860324685980097537820471",
                "4.935953323946320527337771310474635076877",
                "7.043407879210064432464001257357567073886"
            };

            const double k = 0.5;

            for (int i = -256; i < 16; i++) {
                decimal n = i / 16m;

                MultiPrecision<Pow2.N4> expected = expecteds[i + 256];

                MultiPrecision<Pow2.N4> y4 = MultiPrecision<Pow2.N4>.EllipticPi(n, k);
                MultiPrecision<Pow2.N8> y8 = MultiPrecision<Pow2.N8>.EllipticPi(n, k);
                MultiPrecision<Pow2.N16> y16 = MultiPrecision<Pow2.N16>.EllipticPi(n, k);
                MultiPrecision<Pow2.N32> y32 = MultiPrecision<Pow2.N32>.EllipticPi(n, k);

                Console.WriteLine(k);
                Console.WriteLine(y4);
                Console.WriteLine(y4.ToHexcode());
                Console.WriteLine(y8.ToHexcode());
                Console.WriteLine(y16.ToHexcode());
                Console.WriteLine(y32.ToHexcode());

                Assert.IsTrue(MultiPrecision<Pow2.N4>.NearlyEqualBits(expected, y4, 1));
                Assert.IsTrue(MultiPrecision<Pow2.N4>.NearlyEqualBits(y4, y8.Convert<Pow2.N4>(), 1));
                Assert.IsTrue(MultiPrecision<Pow2.N8>.NearlyEqualBits(y8, y16.Convert<Pow2.N8>(), 1));
                Assert.IsTrue(MultiPrecision<Pow2.N16>.NearlyEqualBits(y16, y32.Convert<Pow2.N16>(), 1));
            }
        }

        [TestMethod]
        public void EllipticKNearOneTest() {
            const int exponent = -32;

            {
                MultiPrecision<Pow2.N4>[] ks = {
                    MultiPrecision<Pow2.N4>.BitDecrement(1),
                    MultiPrecision<Pow2.N4>.BitDecrement(1 - MultiPrecision<Pow2.N4>.Ldexp(1, exponent)),
                    1 - MultiPrecision<Pow2.N4>.Ldexp(1, exponent),
                    MultiPrecision<Pow2.N4>.BitIncrement(1 - MultiPrecision<Pow2.N4>.Ldexp(1, exponent)),
                };

                foreach (var k in ks) {
                    MultiPrecision<Pow2.N4> y4 = MultiPrecision<Pow2.N4>.EllipticK(k);
                    MultiPrecision<Pow2.N8> y8 = MultiPrecision<Pow2.N8>.EllipticK(k.Convert<Pow2.N8>());

                    Console.WriteLine(k.ToHexcode());
                    Console.WriteLine(y4);
                    Console.WriteLine(y4.ToHexcode());
                    Console.WriteLine(y8.ToHexcode());

                    Assert.IsTrue(MultiPrecision<Pow2.N4>.NearlyEqualBits(y4, y8.Convert<Pow2.N4>(), 32));
                }
            }

            {
                MultiPrecision<Pow2.N8>[] ks = {
                    MultiPrecision<Pow2.N8>.BitDecrement(1),
                    MultiPrecision<Pow2.N8>.BitDecrement(1 - MultiPrecision<Pow2.N8>.Ldexp(1, exponent)),
                    1 - MultiPrecision<Pow2.N8>.Ldexp(1, exponent),
                    MultiPrecision<Pow2.N8>.BitIncrement(1 - MultiPrecision<Pow2.N8>.Ldexp(1, exponent)),
                };

                foreach (var k in ks) {
                    MultiPrecision<Pow2.N8> y8 = MultiPrecision<Pow2.N8>.EllipticK(k);
                    MultiPrecision<Pow2.N16> y16 = MultiPrecision<Pow2.N16>.EllipticK(k.Convert<Pow2.N16>());

                    Console.WriteLine(k.ToHexcode());
                    Console.WriteLine(y8);
                    Console.WriteLine(y8.ToHexcode());
                    Console.WriteLine(y16.ToHexcode());

                    Assert.IsTrue(MultiPrecision<Pow2.N8>.NearlyEqualBits(y8, y16.Convert<Pow2.N8>(), 64));
                }
            }

            {
                MultiPrecision<Pow2.N16>[] ks = {
                    MultiPrecision<Pow2.N16>.BitDecrement(1),
                    MultiPrecision<Pow2.N16>.BitDecrement(1 - MultiPrecision<Pow2.N16>.Ldexp(1, exponent)),
                    1 - MultiPrecision<Pow2.N16>.Ldexp(1, exponent),
                    MultiPrecision<Pow2.N16>.BitIncrement(1 - MultiPrecision<Pow2.N16>.Ldexp(1, exponent)),
                };

                foreach (var k in ks) {
                    MultiPrecision<Pow2.N16> y16 = MultiPrecision<Pow2.N16>.EllipticK(k);
                    MultiPrecision<Pow2.N32> y32 = MultiPrecision<Pow2.N32>.EllipticK(k.Convert<Pow2.N32>());

                    Console.WriteLine(k.ToHexcode());
                    Console.WriteLine(y16);
                    Console.WriteLine(y16.ToHexcode());
                    Console.WriteLine(y32.ToHexcode());

                    Assert.IsTrue(MultiPrecision<Pow2.N16>.NearlyEqualBits(y16, y32.Convert<Pow2.N16>(), 128));
                }
            }

            {
                MultiPrecision<Pow2.N32>[] ks = {
                    MultiPrecision<Pow2.N32>.BitDecrement(1),
                    MultiPrecision<Pow2.N32>.BitDecrement(1 - MultiPrecision<Pow2.N32>.Ldexp(1, exponent)),
                    1 - MultiPrecision<Pow2.N32>.Ldexp(1, exponent),
                    MultiPrecision<Pow2.N32>.BitIncrement(1 - MultiPrecision<Pow2.N32>.Ldexp(1, exponent)),
                };

                foreach (var k in ks) {
                    MultiPrecision<Pow2.N32> y32 = MultiPrecision<Pow2.N32>.EllipticK(k);
                    MultiPrecision<Pow2.N64> y64 = MultiPrecision<Pow2.N64>.EllipticK(k.Convert<Pow2.N64>());

                    Console.WriteLine(k.ToHexcode());
                    Console.WriteLine(y32);
                    Console.WriteLine(y32.ToHexcode());
                    Console.WriteLine(y64.ToHexcode());

                    Assert.IsTrue(MultiPrecision<Pow2.N32>.NearlyEqualBits(y32, y64.Convert<Pow2.N32>(), 256));
                }
            }
        }

        [TestMethod]
        public void EllipticENearOneTest() {
            const int exponent = -32;

            {
                MultiPrecision<Pow2.N4>[] ks = {
                    MultiPrecision<Pow2.N4>.BitDecrement(1),
                    MultiPrecision<Pow2.N4>.BitDecrement(1 - MultiPrecision<Pow2.N4>.Ldexp(1, exponent)),
                    1 - MultiPrecision<Pow2.N4>.Ldexp(1, exponent),
                    MultiPrecision<Pow2.N4>.BitIncrement(1 - MultiPrecision<Pow2.N4>.Ldexp(1, exponent)),
                };

                foreach (var k in ks) {
                    MultiPrecision<Pow2.N4> y4 = MultiPrecision<Pow2.N4>.EllipticE(k);
                    MultiPrecision<Pow2.N8> y8 = MultiPrecision<Pow2.N8>.EllipticE(k.Convert<Pow2.N8>());

                    Console.WriteLine(k.ToHexcode());
                    Console.WriteLine(y4);
                    Console.WriteLine(y4.ToHexcode());
                    Console.WriteLine(y8.ToHexcode());

                    Assert.IsTrue(MultiPrecision<Pow2.N4>.NearlyEqualBits(y4, y8.Convert<Pow2.N4>(), 32));
                }
            }

            {
                MultiPrecision<Pow2.N8>[] ks = {
                    MultiPrecision<Pow2.N8>.BitDecrement(1),
                    MultiPrecision<Pow2.N8>.BitDecrement(1 - MultiPrecision<Pow2.N8>.Ldexp(1, exponent)),
                    1 - MultiPrecision<Pow2.N8>.Ldexp(1, exponent),
                    MultiPrecision<Pow2.N8>.BitIncrement(1 - MultiPrecision<Pow2.N8>.Ldexp(1, exponent)),
                };

                foreach (var k in ks) {
                    MultiPrecision<Pow2.N8> y8 = MultiPrecision<Pow2.N8>.EllipticE(k);
                    MultiPrecision<Pow2.N16> y16 = MultiPrecision<Pow2.N16>.EllipticE(k.Convert<Pow2.N16>());

                    Console.WriteLine(k.ToHexcode());
                    Console.WriteLine(y8);
                    Console.WriteLine(y8.ToHexcode());
                    Console.WriteLine(y16.ToHexcode());

                    Assert.IsTrue(MultiPrecision<Pow2.N8>.NearlyEqualBits(y8, y16.Convert<Pow2.N8>(), 64));
                }
            }

            {
                MultiPrecision<Pow2.N16>[] ks = {
                    MultiPrecision<Pow2.N16>.BitDecrement(1),
                    MultiPrecision<Pow2.N16>.BitDecrement(1 - MultiPrecision<Pow2.N16>.Ldexp(1, exponent)),
                    1 - MultiPrecision<Pow2.N16>.Ldexp(1, exponent),
                    MultiPrecision<Pow2.N16>.BitIncrement(1 - MultiPrecision<Pow2.N16>.Ldexp(1, exponent)),
                };

                foreach (var k in ks) {
                    MultiPrecision<Pow2.N16> y16 = MultiPrecision<Pow2.N16>.EllipticE(k);
                    MultiPrecision<Pow2.N32> y32 = MultiPrecision<Pow2.N32>.EllipticE(k.Convert<Pow2.N32>());

                    Console.WriteLine(k.ToHexcode());
                    Console.WriteLine(y16);
                    Console.WriteLine(y16.ToHexcode());
                    Console.WriteLine(y32.ToHexcode());

                    Assert.IsTrue(MultiPrecision<Pow2.N16>.NearlyEqualBits(y16, y32.Convert<Pow2.N16>(), 128));
                }
            }

            {
                MultiPrecision<Pow2.N32>[] ks = {
                    MultiPrecision<Pow2.N32>.BitDecrement(1),
                    MultiPrecision<Pow2.N32>.BitDecrement(1 - MultiPrecision<Pow2.N32>.Ldexp(1, exponent)),
                    1 - MultiPrecision<Pow2.N32>.Ldexp(1, exponent),
                    MultiPrecision<Pow2.N32>.BitIncrement(1 - MultiPrecision<Pow2.N32>.Ldexp(1, exponent)),
                };

                foreach (var k in ks) {
                    MultiPrecision<Pow2.N32> y32 = MultiPrecision<Pow2.N32>.EllipticE(k);
                    MultiPrecision<Pow2.N64> y64 = MultiPrecision<Pow2.N64>.EllipticE(k.Convert<Pow2.N64>());

                    Console.WriteLine(k.ToHexcode());
                    Console.WriteLine(y32);
                    Console.WriteLine(y32.ToHexcode());
                    Console.WriteLine(y64.ToHexcode());

                    Assert.IsTrue(MultiPrecision<Pow2.N32>.NearlyEqualBits(y32, y64.Convert<Pow2.N32>(), 256));
                }
            }
        }

        [TestMethod]
        public void EllipticPiNearOneTest() {
            const int exponent = -32;

            foreach (double n in new double[] { -1, -0.5, 0.5, 0.75, 0.99609375 }) {
                {
                    MultiPrecision<Pow2.N4>[] ks = {
                    MultiPrecision<Pow2.N4>.BitDecrement(1),
                    MultiPrecision<Pow2.N4>.BitDecrement(1 - MultiPrecision<Pow2.N4>.Ldexp(1, exponent)),
                    1 - MultiPrecision<Pow2.N4>.Ldexp(1, exponent),
                    MultiPrecision<Pow2.N4>.BitIncrement(1 - MultiPrecision<Pow2.N4>.Ldexp(1, exponent)),
                };

                    foreach (var k in ks) {
                        MultiPrecision<Pow2.N4> y4 = MultiPrecision<Pow2.N4>.EllipticPi(n, k);
                        MultiPrecision<Pow2.N8> y8 = MultiPrecision<Pow2.N8>.EllipticPi(n, k.Convert<Pow2.N8>());

                        Console.WriteLine(k.ToHexcode());
                        Console.WriteLine(y4);
                        Console.WriteLine(y4.ToHexcode());
                        Console.WriteLine(y8.ToHexcode());

                        Assert.IsTrue(MultiPrecision<Pow2.N4>.NearlyEqualBits(y4, y8.Convert<Pow2.N4>(), 32));
                    }
                }

                {
                    MultiPrecision<Pow2.N8>[] ks = {
                    MultiPrecision<Pow2.N8>.BitDecrement(1),
                    MultiPrecision<Pow2.N8>.BitDecrement(1 - MultiPrecision<Pow2.N8>.Ldexp(1, exponent)),
                    1 - MultiPrecision<Pow2.N8>.Ldexp(1, exponent),
                    MultiPrecision<Pow2.N8>.BitIncrement(1 - MultiPrecision<Pow2.N8>.Ldexp(1, exponent)),
                };

                    foreach (var k in ks) {
                        MultiPrecision<Pow2.N8> y8 = MultiPrecision<Pow2.N8>.EllipticPi(n, k);
                        MultiPrecision<Pow2.N16> y16 = MultiPrecision<Pow2.N16>.EllipticPi(n, k.Convert<Pow2.N16>());

                        Console.WriteLine(k.ToHexcode());
                        Console.WriteLine(y8);
                        Console.WriteLine(y8.ToHexcode());
                        Console.WriteLine(y16.ToHexcode());

                        Assert.IsTrue(MultiPrecision<Pow2.N8>.NearlyEqualBits(y8, y16.Convert<Pow2.N8>(), 64));
                    }
                }

                {
                    MultiPrecision<Pow2.N16>[] ks = {
                    MultiPrecision<Pow2.N16>.BitDecrement(1),
                    MultiPrecision<Pow2.N16>.BitDecrement(1 - MultiPrecision<Pow2.N16>.Ldexp(1, exponent)),
                    1 - MultiPrecision<Pow2.N16>.Ldexp(1, exponent),
                    MultiPrecision<Pow2.N16>.BitIncrement(1 - MultiPrecision<Pow2.N16>.Ldexp(1, exponent)),
                };

                    foreach (var k in ks) {
                        MultiPrecision<Pow2.N16> y16 = MultiPrecision<Pow2.N16>.EllipticPi(n, k);
                        MultiPrecision<Pow2.N32> y32 = MultiPrecision<Pow2.N32>.EllipticPi(n, k.Convert<Pow2.N32>());

                        Console.WriteLine(k.ToHexcode());
                        Console.WriteLine(y16);
                        Console.WriteLine(y16.ToHexcode());
                        Console.WriteLine(y32.ToHexcode());

                        Assert.IsTrue(MultiPrecision<Pow2.N16>.NearlyEqualBits(y16, y32.Convert<Pow2.N16>(), 128));
                    }
                }

                {
                    MultiPrecision<Pow2.N32>[] ks = {
                    MultiPrecision<Pow2.N32>.BitDecrement(1),
                    MultiPrecision<Pow2.N32>.BitDecrement(1 - MultiPrecision<Pow2.N32>.Ldexp(1, exponent)),
                    1 - MultiPrecision<Pow2.N32>.Ldexp(1, exponent),
                    MultiPrecision<Pow2.N32>.BitIncrement(1 - MultiPrecision<Pow2.N32>.Ldexp(1, exponent)),
                };

                    foreach (var k in ks) {
                        MultiPrecision<Pow2.N32> y32 = MultiPrecision<Pow2.N32>.EllipticPi(n, k);
                        MultiPrecision<Pow2.N64> y64 = MultiPrecision<Pow2.N64>.EllipticPi(n, k.Convert<Pow2.N64>());

                        Console.WriteLine(k.ToHexcode());
                        Console.WriteLine(y32);
                        Console.WriteLine(y32.ToHexcode());
                        Console.WriteLine(y64.ToHexcode());

                        Assert.IsTrue(MultiPrecision<Pow2.N32>.NearlyEqualBits(y32, y64.Convert<Pow2.N32>(), 256));
                    }
                }
            }
        }

        [TestMethod]
        public void EllipticKUnnormalValueTest() {
            MultiPrecision<Pow2.N8> inf = MultiPrecision<Pow2.N8>.EllipticK(1);

            Assert.AreEqual(MultiPrecision<Pow2.N8>.PositiveInfinity, inf);

            MultiPrecision<Pow2.N8>[] nans = new MultiPrecision<Pow2.N8>[] {
                -1,
                2,
                MultiPrecision<Pow2.N8>.PositiveInfinity,
                MultiPrecision<Pow2.N8>.NegativeInfinity,
                MultiPrecision<Pow2.N8>.NaN
            };

            foreach (MultiPrecision<Pow2.N8> v in nans) {
                MultiPrecision<Pow2.N8> y = MultiPrecision<Pow2.N8>.EllipticK(v);

                Assert.IsTrue(y.IsNaN);
            }
        }

        [TestMethod]
        public void EllipticEUnnormalValueTest() {
            MultiPrecision<Pow2.N8>[] nans = new MultiPrecision<Pow2.N8>[] {
                -1,
                2,
                MultiPrecision<Pow2.N8>.PositiveInfinity,
                MultiPrecision<Pow2.N8>.NegativeInfinity,
                MultiPrecision<Pow2.N8>.NaN
            };

            foreach (MultiPrecision<Pow2.N8> v in nans) {
                MultiPrecision<Pow2.N8> y = MultiPrecision<Pow2.N8>.EllipticE(v);

                Assert.IsTrue(y.IsNaN);
            }
        }

        [TestMethod]
        public void EllipticPiUnnormalValueTest() {
            MultiPrecision<Pow2.N8> inf = MultiPrecision<Pow2.N8>.EllipticPi(0.5, 1);

            Assert.AreEqual(MultiPrecision<Pow2.N8>.PositiveInfinity, inf);

            MultiPrecision<Pow2.N8>[] nans = new MultiPrecision<Pow2.N8>[] {
                -1,
                2,
                MultiPrecision<Pow2.N8>.PositiveInfinity,
                MultiPrecision<Pow2.N8>.NegativeInfinity,
                MultiPrecision<Pow2.N8>.NaN
            };

            foreach (MultiPrecision<Pow2.N8> v in nans) {
                MultiPrecision<Pow2.N8> y = MultiPrecision<Pow2.N8>.EllipticPi(0.5, v);

                Assert.IsTrue(y.IsNaN);
            }

            Assert.IsTrue(MultiPrecision<Pow2.N8>.EllipticPi(2, 0.5).IsNaN);
        }
    }
}
